'''
Generated by ChatGPT by Nikhat Singla on 11 Nov 2024
'''
class GrainCipher:
    def __init__(self, key, iv):
        # Key and IV should be provided as binary strings of appropriate lengths
        self.key = key
        self.iv = iv
        self.LFSR = [int(bit) for bit in self.iv]  # Initializing LFSR with IV
        self.NFSR = [int(bit) for bit in self.key]  # Initializing NFSR with key
    
    def lfsr_feedback(self):
        # LFSR feedback function
        return self.LFSR[62] ^ self.LFSR[51] ^ self.LFSR[38] ^ self.LFSR[23] ^ self.LFSR[13] ^ self.LFSR[0]

    def nfsr_feedback(self):
        # NFSR feedback function (simplified for illustration)
        return self.NFSR[0] ^ self.NFSR[26] ^ self.NFSR[56] ^ (self.NFSR[3] & self.NFSR[67]) ^ self.LFSR[0]

    def clock(self):
        lfsr_out = self.lfsr_feedback()
        nfsr_out = self.nfsr_feedback()
        
        # Shift registers
        self.LFSR = [lfsr_out] + self.LFSR[:-1]
        self.NFSR = [nfsr_out] + self.NFSR[:-1]

        # Generate output bit (simplified keystream)
        return self.NFSR[-1] ^ self.LFSR[-1] ^ (self.NFSR[-1] & self.LFSR[-1])

    def generate_keystream(self, length):
        keystream = []
        for _ in range(length):
            keystream.append(self.clock())
        return keystream

# Example usage
key = "1101011010110101101010101101010110101010101010101010101010101010"  # 80-bit key
iv = "101010101010101010101010101010101010101010101010"  # 64-bit IV

cipher = GrainCipher(key, iv)
keystream = cipher.generate_keystream(128)  # Generate a 128-bit keystream
print("Keystream:", "".join(map(str, keystream)))
